@inherits Panel

@if (Lobby == null)
{
    <div>Lobby is null, this shouldn't happen</div>
    return;
}

<root class="grow">
    <div class="slots">
        <div class="player-slot red">
            @if (red != null)
            {
                <PlayerBox SteamId=@red.Value.SteamId Name=@red.Value.Name />
            }
            else
            {
                <div class="button join-team" onmousedown=@(() => JoinTeam(CheckersTeam.Red))>AI 🤖</div>
            }
        </div>
        <div class="player-slot black">
            @if (black != null)
            {
                <PlayerBox SteamId=@black.Value.SteamId Name=@black.Value.Name />
            }
            else
            {
                <div class="button join-team" onmousedown=@(() => JoinTeam(CheckersTeam.Black))>AI 🤖</div>
            }
        </div>
    </div>
    <div class="spectators">
        <div class="button" onmousedown=@(() => JoinTeam(CheckersTeam.Spectator))>Spectate</div>
        <div class="spectator-list">
            @if (Spectators == null || Spectators.Count == 0)
            {
            }
            else
            {
                @foreach (var spec in Spectators)
                {
                    <div class="spectator-entry">
                        <img class="avatar" src="avatar:@(@spec.Id)" />
                        <div class="name">@spec.Name</div>
                    </div>
                }
            }
        </div>
    </div>
    <LobbyChat Lobby=@Lobby ref="Chat" class="grow" />
    <div class="footer-buttons">
        <div class="button" onmousedown=@LeaveLobby>Leave</div>
        <div class="button" onmousedown=@StartGame>Start</div>
    </div>
</root>

@code {
    public ILobby Lobby { get; set; }

    PlayerInfo? red;
    PlayerInfo? black;
    LobbyChat Chat;

    List<Friend> Spectators = new();

    public override void Tick()
    {
        base.Tick();

        red = Lobby.GetPlayerInfo(CheckersTeam.Red);
        black = Lobby.GetPlayerInfo(CheckersTeam.Black);

        Spectators.Clear();

        foreach (var member in Lobby.Members)
        {
            var pi = Lobby.GetPlayerInfo(member.Id);
            if (pi == null || pi.Value.Team == CheckersTeam.Spectator)
            {
                Spectators.Add(member);
            }
        }

        Lobby.ReceiveMessages(OnNetworkMessage);
    }

    protected override int BuildHash()
    {
        return HashCode.Combine(red?.Name, black?.Name, Spectators.Count);
    }

    public void JoinTeam(CheckersTeam team)
    {
        var stream = ByteStream.Create(sizeof(CheckersTeam));
        stream.Write(team);
        Lobby.OwnerMessage(stream);
    }

    int timeUntilGameStart;
    async void StartGame()
    {
        if (timeUntilGameStart > 0) return;

        var player1id = Lobby.GetPlayer(CheckersTeam.Red);
        var player2id = Lobby.GetPlayer(CheckersTeam.Black);

        timeUntilGameStart = 3;

        var settings = new Dictionary<string, string>()
        {
            { "player1red", player1id?.ToString() ?? "ai" },
            { "player2black", player2id?.ToString() ?? "ai" },
        };

        Lobby.ConVars = settings.ToImmutableDictionary();

        while(timeUntilGameStart > 0)
        {
            timeUntilGameStart -= 1;
            Lobby.SendChat("Game starting in " + timeUntilGameStart);
            await Task.Delay(1000);
        }

        _ = Lobby.LaunchGameAsync();
    }

    void LeaveLobby()
    {
        Lobby.Leave();
    }

    void OnNetworkMessage(ILobby.NetworkMessage msg)
    {
        var wantedTeam = msg.Data.Read<CheckersTeam>();
        Lobby.SetPlayerTeam(msg.Source.Id, wantedTeam);
    }

}
